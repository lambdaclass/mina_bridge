import { Field, ForeignGroup, Poseidon, Provable, Scalar } from "o1js"
import { PolyComm } from "../poly_commitment/commitment";
import { PointEvaluations, ProofEvaluations } from "../prover/prover";
import { ForeignScalar } from "../foreign_fields/foreign_scalar.js";
import { ForeignBase } from "../foreign_fields/foreign_field.js";
import { assert } from "console";

type UnionForeignField = ForeignBase | ForeignScalar;
type UnionForeignFieldArr = ForeignBase[] | ForeignScalar[];
type UnionForeignFieldMatrix = ForeignBase[][] | ForeignScalar[][];

enum SpongeMode {
    Squeezing,
    Absorbing
}

export class ArithmeticSponge {
    params: ArithmeticSpongeParams
    state: UnionForeignFieldArr
    mode: SpongeMode
    offset: number

    constructor(params: ArithmeticSpongeParams) {
        this.params = params;
        this.mode = SpongeMode.Absorbing
        this.offset = 0;
    }

    init(state: UnionForeignFieldArr) {
        this.state = state;
    }

    absorb(elem: UnionForeignField) {
        if (this.mode === SpongeMode.Squeezing) {
            this.mode = SpongeMode.Absorbing;
            this.offset = 0;
        } else if (this.offset === this.params.rate) {
            this.#permutation();
            this.offset = 0;
        }

        this.state[this.offset] = this.state[this.offset].add(elem);
        this.offset++;
    }

    squeeze(): UnionForeignField {
        if (this.mode == SpongeMode.Absorbing || this.offset === this.params.rate) {
            this.mode = SpongeMode.Squeezing;
            this.#permutation();
            this.offset = 0;
        }

        return this.state[this.offset++];
    }

    // permutation algorithms

    #sbox(element: UnionForeignField): UnionForeignField {
        // return element^7
        let element_squared = element.mul(element); // ^2
        let element_fourth = element_squared.mul(element_squared); // ^4
        let element_sixth = element_fourth.mul(element_squared); // ^6
        return element_sixth.mul(element);
    }

    #applyMds(): UnionForeignFieldArr {
        let n = this.params.mds[0].length;
        assert(n == this.state.length);

        // matrix-vector product: mds * state
        return this.params.mds.map((row) =>
            this.state.reduce(
                (acc, s, i) => acc.add(s.mul(row[i])),
                ForeignBase.from(0))
        );
    }

    #applyRound(round: number) {
        // sbox
        this.state = this.state.map(this.#sbox);

        // apply mds
        this.state = this.#applyMds();

        // add round constant
        this.state = this.state.map((s, i) => s.add(this.params.round_constants[round][i]));
    }

    #permutation() {
        let round_offset = 0;
        if (this.params.ark_initial) {
            let constant = this.params.round_constants[0];
            this.state = this.state.map((s, i) => s.add(constant[i]));
            round_offset = 1;
        }

        for (let round = 0; round < this.params.rounds; round++) {
            this.#applyRound(round + round_offset);
        }
    }
}

export class ArithmeticSpongeParams {
    mds: UnionForeignFieldMatrix
    round_constants: UnionForeignFieldMatrix
    ark_initial: boolean
    rounds: number
    rate: number
}

/**
 * Wrapper over the poseidon `ArithmeticSponge` class which extends its functionality.
 * Currently the sponge operates over the emulated base field (whose elements are 
 * represented with the `ForeignField` type).
 */
export class Sponge {
    static readonly HIGH_ENTROPY_LIMBS: number = 2;
    static readonly CHALLENGE_LENGTH_IN_LIMBS: number = 2;

    #internalSponge
    lastSqueezed: bigint[] // these are 64 bit limbs

    constructor(params: ArithmeticSpongeParams, initial_state: UnionForeignFieldArr) {
        this.#internalSponge = new ArithmeticSponge(params);
        this.#internalSponge.init(initial_state);
        this.lastSqueezed = [];
    }

    absorb(x: ForeignBase) {
        this.lastSqueezed = [];
        this.#internalSponge.absorb(x);
    }

    squeezeField(): ForeignBase {
        this.lastSqueezed = [];
        return this.#internalSponge.squeeze();
    }

    absorbGroup(g: ForeignGroup) {
        this.#internalSponge.absorb(g.x);
        this.#internalSponge.absorb(g.y);
    }

    absorbGroups(gs: ForeignGroup[]) {
        gs.forEach(this.absorbGroup.bind(this));
        // bind is necessary for avoiding context loss
    }

    /** Will do an operation over the scalar to make it suitable for absorbing */
    absorbScalar(s: ForeignScalar) {
        // this operation was extracted from Kimchi FqSponge's`absorb_fr()`.
        if (ForeignScalar.modulus < ForeignBase.modulus) {
            let f = ForeignBase.from(0);
            Provable.asProverBn254(() => {
                f = ForeignBase.from(s.toBigInt());
            });
            this.absorb(f);
        } else {
            let high_bits = ForeignBase.from(0);
            Provable.asProverBn254(() => {
                high_bits = ForeignBase.from(s.toBigInt() >> 1n);
                // WARN:  >> is the sign-propagating left shift operator, so if the number is negative,
                // it'll add 1s instead of 0s to the most significant end of the integer.
                // >>>, the zero-fill left shift operator should be used instead here, but it isnt
                // defined for BigInt as it's always signed (and can't be coarced into an unsigned int).
                // In any way, the integers are always positive, so there's no problem here.
            });

            let low_bit = ForeignBase.from(0);
            Provable.asProverBn254(() => {
                low_bit = ForeignBase.from(s.toBigInt() & 1n);
            });

            this.absorb(high_bits);
            this.absorb(low_bit);
        }
    }

    absorbScalars(s: ForeignScalar[]) {
        this.lastSqueezed = [];
        s.forEach(this.absorbScalar.bind(this));
    }

    absorbCommitment(commitment: PolyComm<ForeignGroup>) {
        this.absorbGroups(commitment.unshifted);
        if (commitment.shifted) this.absorbGroup(commitment.shifted);
    }

    absorbEvals(evals: ProofEvaluations<PointEvaluations<ForeignScalar[]>>) {
        const {
            public_input,
            w,
            z,
            s,
            coefficients,
            //lookup,
            genericSelector,
            poseidonSelector
        } = evals;
        let points = [
            z,
            genericSelector,
            poseidonSelector,
        ]
        // arrays:
        points = points.concat(w);
        points = points.concat(s);
        points = points.concat(coefficients);

        // optional:
        if (public_input) points.push(public_input);
        //if (lookup) points.push(lookup); // FIXME: ignoring lookups

        points.forEach((p) => {
            this.absorbScalars.bind(this)(p.zeta);
            this.absorbScalars.bind(this)(p.zetaOmega);
        });
    }

    /**
    * This squeezes until `numLimbs` 64-bit high entropy limbs are retrieved.
    */
    squeezeLimbs(numLimbs: number): bigint[] { // will return limbs of 64 bits.
        if (this.lastSqueezed.length >= numLimbs) {
            const limbs = this.lastSqueezed.slice(0, numLimbs);
            const remaining = this.lastSqueezed.slice(numLimbs + 1, this.lastSqueezed.length);

            this.lastSqueezed = remaining;
            return limbs;
        } else {
            let x = this.#internalSponge.squeeze().toBigInt();

            let xLimbs = [];
            let mask = (1n << 64n) - 1n; // highest 64 bit value
            for (let _ = 0; _ <= Sponge.HIGH_ENTROPY_LIMBS; _++) {
                xLimbs.push(x & mask); // 64 bits limbs, least significant first
                x >>= 64n;
            }
            this.lastSqueezed = this.lastSqueezed.concat(xLimbs);
            return this.squeezeLimbs(numLimbs);
        }
    }

    /**
    * Calls `squeezeLimbs()` and composes them into a scalar.
    */
    squeeze(numLimbs: number): ForeignScalar {
        let squeezed = 0n;
        const squeezedLimbs = this.squeezeLimbs(numLimbs);
        for (const i in this.squeezeLimbs(numLimbs)) {
            squeezed += squeezedLimbs[i] << (64n * BigInt(i));
        }
        return ForeignScalar.from(squeezed);
    }

    challenge(): ForeignScalar {
        return this.squeeze(Sponge.CHALLENGE_LENGTH_IN_LIMBS);
    }

    digest(): ForeignScalar {
        return Provable.witnessBn254(ForeignScalar, () => {
            const x = this.squeezeField().toBigInt();
            const result = x < ForeignScalar.modulus ? x : 0;
            // Comment copied from Kimchi's codebase:
            //
            // Returns zero for values that are too large.
            // This means that there is a bias for the value zero (in one of the curve).
            // An attacker could try to target that seed, in order to predict the challenges u and v produced by the Fr-Sponge.
            // This would allow the attacker to mess with the result of the aggregated evaluation proof.
            // Previously the attacker's odds were 1/q, now it's (q-p)/q.
            // Since log2(q-p) ~ 86 and log2(q) ~ 254 the odds of a successful attack are negligible.
            return ForeignScalar.from(result);
        });
    }
}

export function fq_sponge_params(): ArithmeticSpongeParams {
    return {
        ark_initial: false,
        rounds: 55,
        rate: 2,
        mds: [
            [
                28115781186772277486790024060542467295096710153315236019619365740021995624782n,
                22098002279041163367053200604969603243328318626084412751290336872362628294144n,
                10518156075882958317589806716220047551309200159506906232124952575033472931386n,
            ],
            [
                8515206633865386306014865142947895502833797732365705727001733785057042819852n,
                19310731234716792175834594131802557577955166208124819468043130037927500684373n,
                361439796332338311597104753147071943681730695313819021679602959964518909239n,
            ],
            [
                2193808570710678216879007026210418088296432071066284289131688133644970611483n,
                1201496953174589855481629688627002262719699487577300614284420648015658009380n,
                11619800255560837597192574795389782851917036920101027584480912719351481334717n,
            ],
        ].map((arr) => arr.map(ForeignScalar.from)),
        round_constants: [
            [
                2517640872121921965298496967863234221143680281046699148760560696057284005606n,
                3391756047431116221709518926936538303706203177575259437741546230828058541679n,
                28193080211857729746868575888309975056941007202713113547154010421664334143056n,
            ],
            [
                25261619184426186938919514618416881383323154981235406731208902193655587998749n,
                5438499261516835502981531641588657477212528137520578797088407969732830437134n,
                1447697894671779324954748568939217281372628544919576009518449387265606369859n,
            ],
            [
                5035532530235542599906399941203951970682478985022204457211063504597080640029n,
                18548939393800290417015907795270784249198528773378593112394621615021029911007n,
                28314657632459005492203969796973258399484591559931227050853551342156833947891n,
            ],
            [
                10075465805557971120845970058070916255338843492716768289922460436606689369477n,
                21985996556868691161386211003270106475915714625334030557267947035839814254081n,
                9778523497398309788873186849997676949503189428912377745814036481347657299161n,
            ],
            [
                6085447467925843146276340167082679235758707259098174769103982431882228334038n,
                11214803418623679719680560978819619149235769633101428825693192995405955507848n,
                20585482519401972421539035665320299097144487427998598740316244173221216198246n,
            ],
            [
                18602266896623204184748247002001496873223612100325866696399863661914256384486n,
                22165919841309962137671309308234475433816142848229812860682345190836583925843n,
                22833505632200982123686653495190412951871851216487329681987951602744930627412n,
            ],
            [
                200996541962081036547810490655955282117589336000744078845964972887355639644n,
                17159390488590225463405148524511348095493761844950655304775985535830170165304n,
                7519689807382250126180254188667761476713509751388558140260305473388567529705n,
            ],
            [
                14159331841037307097148990917607709903712709092721125605507719995418592745663n,
                10490695046555645615062072066940833278139280813429718770298136076375411280286n,
                9996921069626538041923613626115903019578182147993504053879837245826104687293n,
            ],
            [
                28009241574980093348462093077828465154604666812509186537490618830383877236685n,
                18925279443828804264179873719494108834579217607847079902207023181925588871175n,
                13126164514615718686767880517156253918404905174962666942976286681458411835722n,
            ],
            [
                1125667389564136291825905670957082668987611691949011617627091942772124917554n,
                12737072162917928935765906421286553437026542524142430058538254259863452556200n,
                9855113244149548216327019561589719324434080884827484555441182992249251832158n,
            ],
            [
                6006604346195593001833550983798183088851044846011297061071167569148810544010n,
                23783465709464699444911580329342599880163107932561352210466223087637763994288n,
                1581060363083815351710754851350813999229829634252940169154424073664057276774n,
            ],
            [
                24121961545310887440574053281799796355427122479626872394472157625455666323022n,
                23925781309638869606256007860000699567158045595326122474217734988331349678475n,
                433512980570318160778040929743715681206456334448542248765142091911433454703n,
            ],
            [
                8080307140515367021419180108267113624095868360927897204642243727009503935719n,
                13661807750191096117929173962837770733539092996971801228126331071941306856508n,
                9268394414065063505331314418649987795374055416089324253185088859000252370756n,
            ],
            [
                22374115023493407761095751712373350824513305398485824175669182288521610150311n,
                22951274634403942446739133926874770994604864227598567536319143390467218980824n,
                21411532836345163980832919797897483979345524322135010935120723250070247464549n,
            ],
            [
                20688285497159372157224857370703211924056803904697620218749985029000049442943n,
                8350087190167057556241775495760369408781696125331535735138679647687106863977n,
                13485893160159637778707269611856683957779710980787754997470728774769162419576n,
            ],
            [
                4621792784192688819920303666439776744566536330750316034321950771579978771021n,
                13900656491552343190424687336475573267660717627286734246676255663734655019912n,
                16577037405341365304416318048187907895286388691199320947077947552959834207823n,
            ],
            [
                17453637937712580666297652202332273322112052411250919589546137386514183913993n,
                9852736110707561006399582579453396957225552488023642073454517393228764176471n,
                8053970357622019747109700798952789019805031210730923951116580579194625334710n,
            ],
            [
                14566849926060034944494603512439278530775668595134329897253012222562109882008n,
                8863944349051942080060073891691580009950648437676309749771884964336231381737n,
                16455762285584757654310476505019438984453107876908065440396394186006196612077n,
            ],
            [
                28098375311516838082882166381119795701982164671360574802728073046992978741339n,
                13538346067341652694825445642847479918140731375902310280683284825070643960891n,
                18313412784975078534612748781201087502203257054025866271209086293337241477805n,
            ],
            [
                24807061345703288899043018750567607387907450632666147403804744880717736838940n,
                16638378638176552952794487891875614248110181610295183306789394461536640085108n,
                2342874860138849081032934096750004917991517717553229739958552529472431319656n,
            ],
            [
                21631810094765090996871180483650934431972930909326270651252393395613356531282n,
                2220759912186713489010197903069023809260408491503960321105305330086947471014n,
                14815764944505758746761442212662459585220143243155504464852948007238083120696n,
            ],
            [
                23947619952183462858644581465494050309407721428302029371055887418452994318961n,
                25035254658153233628169609451068923631269927394392748023889572264723092874720n,
                17468020412163678868776493601957969748197290347006692843306595815987772942732n,
            ],
            [
                15262198027618900223004625662874755104828479630165814039838611768431063172994n,
                25161066724266754383358798644805908588326959881061318668106454787543611445887n,
                2454250001039770891411267760383268680504653332090622148533496270387793031332n,
            ],
            [
                9171946491887082474979985164918822959719377078284664312866368737511724712644n,
                6672870238005411132577302023934139592378291207852994424857452575898007687159n,
                2950400608762766076731526167833938554190979516192019010641815746350334547745n,
            ],
            [
                10653725154501691589476837895400001173933804810435931645261606197625601363132n,
                12717400214508961810851553873706609743505640660238109459222577386574996883747n,
                5871058785976817081042949511195036111847495052209270758342334312740290470200n,
            ],
            [
                18192562665205900830717234913238180302424621739145466326708104656354353538015n,
                19946412409172091711185698839696950657650658896270607012902209489827790455314n,
                21997416257528392077410699901606794827305154904508120972585193876767785262539n,
            ],
            [
                16525092684784199198745517563091041705366544303388462641935777835264970071331n,
                27613372589672512522307803997948488817865025374001297632527692577079750053456n,
                23369674747888778238616865774843237791546925005553032792584302158017141634655n,
            ],
            [
                11012136308159330675912474383855146192700147583104742924419195363346115019405n,
                20632243971343595216801828590185617698839041744000918292113739726624680548813n,
                10530371852841765918702282883445676639977895775479854136871270050807595649710n,
            ],
            [
                1610594053831245596683250788274018471388810111366046583216577135605955718023n,
                452300846172044702598793611907955884294868639769163388132276731316720796255n,
                22297945145153422883128810575530182077542612397826351322358420927950400316504n,
            ],
            [
                28212510899948152845929142163236606049756849316851154583029383581129293825706n,
                28325924586146971645663587791728624896861517146549428987043066595915712075981n,
                23489013325315178311518261165509151135555509351661386106070231815049642443022n,
            ],
            [
                10150108696154604591036176090028652090941375062280095655463112192524823306544n,
                14935856239824547404885450872472169780177654619496758596151670953532153419587n,
                4367251608666794961207658726914177158125339342277880902441218521648798930454n,
            ],
            [
                14278046449956534912766622635951826857049583276976844525135170835571509013020n,
                11627801940273881243235293875277734806211947530882079339115454640100174268255n,
                22853853581419894582873479603685652928885253184240650995805892818180355600894n,
            ],
            [
                4405193089432137585625363585733613667088817369599257533888439029942466720878n,
                26434497741746827048559732407319982377645052620918789373329661707603241810667n,
                23558650878002025381506445692526977061352711282820117441110868042756853707843n,
            ],
            [
                27427423077748345654234924309581695092179468167973406115643356520054395647078n,
                17585801825757985265979208086560185342609289319992678737491966299829354657891n,
                22079131836316223121286612953926945430480043835170303484162677394496378207190n,
            ],
            [
                20126865597655889981803452476686954944892814234259869552204215672627920656068n,
                5591585339015997308682985123056479221565470335707041924016523106405300562835n,
                9422316572086279209843572429137982927615080330725918371521370800874341571474n,
            ],
            [
                2735677349719528139570614238939713941030373684882307164259316901880218894412n,
                16229147459127626384090303399894157248853232127961182470501666316464149067069n,
                17151067888069760812629817914442472623785916486309268828873486698948911058517n,
            ],
            [
                13833972862865550568348750465964022581895521701070662509936215512761615491351n,
                9624679817699048440664645568701817641311119158936258215534754849666144699339n,
                10273179847163882031630140477902608240997857384703412878925192706057610103613n,
            ],
            [
                3172037826021850467928085880043492158321918352296515787555947245998877188849n,
                28890802281119993101506497911757988639840653958256859430239635494708187190915n,
                23496953773368274731821824281559682992786773767847557735733251263969009271239n,
            ],
            [
                1509044982655321910215442389040863370827049078919961070795919190828975736187n,
                13927172650979098916742472053302036482743492746437467103459483008024082210879n,
                17248379591027039069313293591621091031164062825086122980769287846951363066520n,
            ],
            [
                11350333545134487336540967650634077894516131586708748380417042089147896079201n,
                639497848254405996993150855123515463224731962182127668267769103213580096582n,
                24528361599642320451530127347946798949257664936307333999618279589325586618880n,
            ],
            [
                8217015496508457685301448884203977810298711070026260090660268003968421268717n,
                6703444480721420507060701216472376128524677965704475494357937059812166295103n,
                8051365375874262471960241848873604339195556527603956582828833313772444122472n,
            ],
            [
                10412735174026641936105532807659667596947675372330827493649954160029449767122n,
                8447576362386697729021229138353952824970707645851763166490398451107606293885n,
                4802965296970904162106502573136505305073730277702271660292532219583823320181n,
            ],
            [
                3244354881334856885788568976540712586633556478250043997221528214026130052269n,
                817270901440592571623549787267103386561304980129799240746702119063425010300n,
                6566338353152134577893356938981496347522747926131278635019050445923229718029n,
            ],
            [
                4854521709622003124815206874897232905514824969466266873443062691298769768277n,
                12830134034124699064152980183243986699241944691238427861184919962819448276943n,
                24309439157688106320977023683093060719537142150089588950480669629964661236785n,
            ],
            [
                1853791709949511636795588377016980571084333441972847324139062389997895453872n,
                11399505004623970417786749745036397690793259153591025248188283534764565207306n,
                6280235834578097246976697944083887557501831809932305676532914637669922657807n,
            ],
            [
                1516294190187225192808636261678393666537186816904214776860202535671714230097n,
                5835813607391397757416951433662507638966861369364000865214031356023042341328n,
                25777313996516799380163546628133415256678997511953860435781885414872422583905n,
            ],
            [
                9749298878960864917089442034293906589697892682402070689770627645324414273893n,
                19986612197193695239708718365565978831607994386509967951279410162135133793419n,
                5020585421647265067890838871263925730422335215511670656851726444447972642755n,
            ],
            [
                7256822974971238434100017358319972368738353570339258522235883585691301791128n,
                9789139064283320903202623693175751994730652446378861671859478926598420184293n,
                19283468246375057076525422714896652730563534118070235174488237489890270899533n,
            ],
            [
                11487321478704551489982188818171823402443882145686911658585221913500937481156n,
                16513958012405406860890342996091255867910990589443610357743227675107758695101n,
                24764429351173766080138047602436205744310671344674490826288279531917797263231n,
            ],
            [
                8256258316375000496541664568891934707113720493937218096466691600593595285909n,
                26919625894863883593081175799908601863265420311251948374988589188905317081443n,
                10135851848127171199130812615581006825969108287418884763125596866448544567342n,
            ],
            [
                17567146349912867622479843655652582453162587996421871126612027345809646551661n,
                2524802431860351616270075327416865184018211992251290134350377936184047953453n,
                3417609143162661859785838333493682460709943782149216513733553607075915176256n,
            ],
            [
                6906455011502599710165862205505812668908382042647994457156780865092846286493n,
                21042097659487317081899343674473811663642293019125869396575405454328274948985n,
                25222370053690749913129090298406788520061040938312366403907461864202905656238n,
            ],
            [
                18933201791079410639949505893100361911334261775545573219434897335758052335005n,
                14503331557348715387048413780116585195932777696828173626366829282421027153184n,
                3558781473325529402549318082942465709639711182863041375748599816583729962116n,
            ],
            [
                23932570601084008621895097434501731960424360312878373523779451810455362953625n,
                13286131463754478912858022007443470896920464302917391606059553157137090717219n,
                9969435194445819847988134248075866286921574284754991873902788928171429847506n,
            ],
            [
                10821551500865029673311799086099720530496516676117927814621168667836737594374n,
                57689402905128519605376551862931564078571458212398163192591670282543962941n,
                4484359679395800410695081358212522306960518636189521201445105538223906998486n,
            ],
        ].map((arr) => arr.map(ForeignScalar.from)),
    }
}

export function fp_sponge_params(): ArithmeticSpongeParams {
    return {
        ark_initial: false,
        rounds: 55,
        rate: 2,
        mds: [
            [
                12035446894107573964500871153637039653510326950134440362813193268448863222019n,
                25461374787957152039031444204194007219326765802730624564074257060397341542093n,
                27667907157110496066452777015908813333407980290333709698851344970789663080149n,
            ],
            [
                4491931056866994439025447213644536587424785196363427220456343191847333476930n,
                14743631939509747387607291926699970421064627808101543132147270746750887019919n,
                9448400033389617131295304336481030167723486090288313334230651810071857784477n,
            ],
            [
                10525578725509990281643336361904863911009900817790387635342941550657754064843n,
                27437632000253211280915908546961303399777448677029255413769125486614773776695n,
                27566319851776897085443681456689352477426926500749993803132851225169606086988n,
            ],
        ].map((arr) => arr.map(ForeignBase.from)),
        round_constants: [
            [
                21155079691556475130150866428468322463125560312786319980770950159250751855431n,
                16883442198399350202652499677723930673110172289234921799701652810789093522349n,
                17030687036425314703519085065002231920937594822150793091243263847382891822670n,
            ],
            [
                25216718237129482752721276445368692059997901880654047883630276346421457427360n,
                9054264347380455706540423067244764093107767235485930776517975315876127782582n,
                26439087121446593160953570192891907825526260324480347638727375735543609856888n,
            ],
            [
                15251000790817261169639394496851831733819930596125214313084182526610855787494n,
                10861916012597714684433535077722887124099023163589869801449218212493070551767n,
                18597653523270601187312528478986388028263730767495975370566527202946430104139n,
            ],
            [
                15831416454198644276563319006805490049460322229057756462580029181847589006611n,
                15171856919255965617705854914448645702014039524159471542852132430360867202292n,
                15488495958879593647482715143904752785889816789652405888927117106448507625751n,
            ],
            [
                19039802679983063488134304670998725949842655199289961967801223969839823940152n,
                4720101937153217036737330058775388037616286510783561045464678919473230044408n,
                10226318327254973427513859412126640040910264416718766418164893837597674300190n,
            ],
            [
                20878756131129218406920515859235137275859844638301967889441262030146031838819n,
                7178475685651744631172532830973371642652029385893667810726019303466125436953n,
                1996970955918516145107673266490486752153434673064635795711751450164177339618n,
            ],
            [
                15205545916434157464929420145756897321482314798910153575340430817222504672630n,
                25660296961552699573824264215804279051322332899472350724416657386062327210698n,
                13842611741937412200312851417353455040950878279339067816479233688850376089318n,
            ],
            [
                1383799642177300432144836486981606294838630135265094078921115713566691160459n,
                1135532281155277588005319334542025976079676424839948500020664227027300010929n,
                4384117336930380014868572224801371377488688194169758696438185377724744869360n,
            ],
            [
                21725577575710270071808882335900370909424604447083353471892004026180492193649n,
                676128913284806802699862508051022306366147359505124346651466289788974059668n,
                25186611339598418732666781049829183886812651492845008333418424746493100589207n,
            ],
            [
                10402240124664763733060094237696964473609580414190944671778761753887884341073n,
                11918307118590866200687906627767559273324023585642003803337447146531313172441n,
                16895677254395661024186292503536662354181715337630376909778003268311296637301n,
            ],
            [
                23818602699032741669874498456696325705498383130221297580399035778119213224810n,
                4285193711150023248690088154344086684336247475445482883105661485741762600154n,
                19133204443389422404056150665863951250222934590192266371578950735825153238612n,
            ],
            [
                5515589673266504033533906836494002702866463791762187140099560583198974233395n,
                11830435563729472715615302060564876527985621376031612798386367965451821182352n,
                7510711479224915247011074129666445216001563200717943545636462819681638560128n,
            ],
            [
                24694843201907722940091503626731830056550128225297370217610328578733387733444n,
                27361655066973784653563425664091383058914302579694897188019422193564924110528n,
                21606788186194534241166833954371013788633495786419718955480491478044413102713n,
            ],
            [
                19934060063390905409309407607814787335159021816537006003398035237707924006757n,
                8495813630060004961768092461554180468161254914257386012937942498774724649553n,
                27524960680529762202005330464726908693944660961000958842417927307941561848461n,
            ],
            [
                15178481650950399259757805400615635703086255035073919114667254549690862896985n,
                16164780354695672259791105197274509251141405713012804937107314962551600380870n,
                10529167793600778056702353412758954281652843049850979705476598375597148191979n,
            ],
            [
                721141070179074082553302896292167103755384741083338957818644728290501449040n,
                22044408985956234023934090378372374883099115753118261312473550998188148912041n,
                27068254103241989852888872162525066148367014691482601147536314217249046186315n,
            ],
            [
                3880429241956357176819112098792744584376727450211873998699580893624868748961n,
                17387097125522937623262508065966749501583017524609697127088211568136333655623n,
                6256814421247770895467770393029354017922744712896100913895513234184920631289n,
            ],
            [
                2942627347777337187690939671601251987500285937340386328746818861972711408579n,
                24031654937764287280548628128490074801809101323243546313826173430897408945397n,
                14401457902976567713827506689641442844921449636054278900045849050301331732143n,
            ],
            [
                20170632877385406450742199836933900257692624353889848352407590794211839130727n,
                24056496193857444725324410428861722338174099794084586764867109123681727290181n,
                11257913009612703357266904349759250619633397075667824800196659858304604714965n,
            ],
            [
                22228158921984425749199071461510152694025757871561406897041788037116931009246n,
                9152163378317846541430311327336774331416267016980485920222768197583559318682n,
                13906695403538884432896105059360907560653506400343268230130536740148070289175n,
            ],
            [
                7220714562509721437034241786731185291972496952091254931195414855962344025067n,
                27608867305903811397208862801981345878179337369367554478205559689592889691927n,
                13288465747219756218882697408422850918209170830515545272152965967042670763153n,
            ],
            [
                8251343892709140154567051772980662609566359215743613773155065627504813327653n,
                22035238365102171608166944627493632660244312563934708756134297161332908879090n,
                13560937766273321037807329177749403409731524715067067740487246745322577571823n,
            ],
            [
                21652518608959234550262559135285358020552897349934571164032339186996805408040n,
                22479086963324173427634460342145551255011746993910136574926173581069603086891n,
                13676501958531751140966255121288182631772843001727158043704693838707387130095n,
            ],
            [
                5680310394102577950568930199056707827608275306479994663197187031893244826674n,
                25125360450906166639190392763071557410047335755341060350879819485506243289998n,
                22659254028501616785029594492374243581602744364859762239504348429834224676676n,
            ],
            [
                23101411405087512171421838856759448177512679869882987631073569441496722536782n,
                24149774013240355952057123660656464942409328637280437515964899830988178868108n,
                5782097512368226173095183217893826020351125522160843964147125728530147423065n,
            ],
            [
                13540762114500083869920564649399977644344247485313990448129838910231204868111n,
                20421637734328811337527547703833013277831804985438407401987624070721139913982n,
                7742664118615900772129122541139124149525273579639574972380600206383923500701n,
            ],
            [
                1109643801053963021778418773196543643970146666329661268825691230294798976318n,
                16580663920817053843121063692728699890952505074386761779275436996241901223840n,
                14638514680222429058240285918830106208025229459346033470787111294847121792366n,
            ],
            [
                17080385857812672649489217965285727739557573467014392822992021264701563205891n,
                26176268111736737558502775993925696791974738793095023824029827577569530708665n,
                4382756253392449071896813428140986330161215829425086284611219278674857536001n,
            ],
            [
                13934033814940585315406666445960471293638427404971553891617533231178815348902n,
                27054912732979753314774418228399230433963143177662848084045249524271046173121n,
                28916070403698593376490976676534962592542013020010643734621202484860041243391n,
            ],
            [
                24820015636966360150164458094894587765384135259446295278101998130934963922381n,
                7969535238488580655870884015145760954416088335296905520306227531221721881868n,
                7690547696740080985104189563436871930607055124031711216224219523236060212249n,
            ],
            [
                9712576468091272384496248353414290908377825697488757134833205246106605867289n,
                12148698031438398980683630141370402088785182722473169207262735228500190477924n,
                14359657643133476969781351728574842164124292705609900285041476162075031948227n,
            ],
            [
                23563839965372067275137992801035780013422228997724286060975035719045352435470n,
                4184634822776323233231956802962638484057536837393405750680645555481330909086n,
                16249511905185772125762038789038193114431085603985079639889795722501216492487n,
            ],
            [
                11001863048692031559800673473526311616702863826063550559568315794438941516621n,
                4702354107983530219070178410740869035350641284373933887080161024348425080464n,
                23751680507533064238793742311430343910720206725883441625894258483004979501613n,
            ],
            [
                28670526516158451470169873496541739545860177757793329093045522432279094518766n,
                3568312993091537758218792253361873752799472566055209125947589819564395417072n,
                1819755756343439646550062754332039103654718693246396323207323333948654200950n,
            ],
            [
                5372129954699791301953948907349887257752247843844511069896766784624930478273n,
                17512156688034945920605615850550150476471921176481039715733979181538491476080n,
                25777105342317622165159064911913148785971147228777677435200128966844208883059n,
            ],
            [
                25350392006158741749134238306326265756085455157012701586003300872637887157982n,
                20096724945283767296886159120145376967480397366990493578897615204296873954844n,
                8063283381910110762785892100479219642751540456251198202214433355775540036851n,
            ],
            [
                4393613870462297385565277757207010824900723217720226130342463666351557475823n,
                9874972555132910032057499689351411450892722671352476280351715757363137891038n,
                23590926474329902351439438151596866311245682682435235170001347511997242904868n,
            ],
            [
                17723373371137275859467518615551278584842947963894791032296774955869958211070n,
                2350345015303336966039836492267992193191479606566494799781846958620636621159n,
                27755207882790211140683010581856487965587066971982625511152297537534623405016n,
            ],
            [
                6584607987789185408123601849106260907671314994378225066806060862710814193906n,
                609759108847171587253578490536519506369136135254150754300671591987320319770n,
                28435187585965602110074342250910608316032945187476441868666714022529803033083n,
            ],
            [
                16016664911651770663938916450245705908287192964254704641717751103464322455303n,
                17551273293154696089066968171579395800922204266630874071186322718903959339163n,
                20414195497994754529479032467015716938594722029047207834858832838081413050198n,
            ],
            [
                19773307918850685463180290966774465805537520595602496529624568184993487593855n,
                24598603838812162820757838364185126333280131847747737533989799467867231166980n,
                11040972566103463398651864390163813377135738019556270484707889323659789290225n,
            ],
            [
                5189242080957784038860188184443287562488963023922086723850863987437818393811n,
                1435203288979376557721239239445613396009633263160237764653161500252258220144n,
                13066591163578079667911016543985168493088721636164837520689376346534152547210n,
            ],
            [
                17345901407013599418148210465150865782628422047458024807490502489711252831342n,
                22139633362249671900128029132387275539363684188353969065288495002671733200348n,
                1061056418502836172283188490483332922126033656372467737207927075184389487061n,
            ],
            [
                10241738906190857416046229928455551829189196941239601756375665129874835232299n,
                27808033332417845112292408673209999320983657696373938259351951416571545364415n,
                18820154989873674261497645724903918046694142479240549687085662625471577737140n,
            ],
            [
                7983688435214640842673294735439196010654951226956101271763849527529940619307n,
                17067928657801807648925755556866676899145460770352731818062909643149568271566n,
                24472070825156236829515738091791182856425635433388202153358580534810244942762n,
            ],
            [
                25752201169361795911258625731016717414310986450004737514595241038036936283227n,
                26041505376284666160132119888949817249574689146924196064963008712979256107535n,
                23977050489096115210391718599021827780049209314283111721864956071820102846008n,
            ],
            [
                26678257097278788410676026718736087312816016749016738933942134600725962413805n,
                10480026985951498884090911619636977502506079971893083605102044931823547311729n,
                21126631300593007055117122830961273871167754554670317425822083333557535463396n,
            ],
            [
                1564862894215434177641156287699106659379648851457681469848362532131406827573n,
                13247162472821152334486419054854847522301612781818744556576865965657773174584n,
                8673615954922496961704442777870253767001276027366984739283715623634850885984n,
            ],
            [
                2794525076937490807476666942602262298677291735723129868457629508555429470085n,
                4656175953888995612264371467596648522808911819700660048695373348629527757049n,
                23221574237857660318443567292601561932489621919104226163978909845174616477329n,
            ],
            [
                1878392460078272317716114458784636517603142716091316893054365153068227117145n,
                2370412714505757731457251173604396662292063533194555369091306667486647634097n,
                17409784861870189930766639925394191888667317762328427589153989811980152373276n,
            ],
            [
                25869136641898166514111941708608048269584233242773814014385564101168774293194n,
                11361209360311194794795494027949518465383235799633128250259863567683341091323n,
                14913258820718821235077379851098720071902170702113538811112331615559409988569n,
            ],
            [
                12957012022018304419868287033513141736995211906682903915897515954290678373899n,
                17128889547450684566010972445328859295804027707361763477802050112063630550300n,
                23329219085372232771288306767242735245018143857623151155581182779769305489903n,
            ],
            [
                1607741027962933685476527275858938699728586794398382348454736018784568853937n,
                2611953825405141009309433982109911976923326848135736099261873796908057448476n,
                7372230383134982628913227482618052530364724821976589156840317933676130378411n,
            ],
            [
                20203606758501212620842735123770014952499754751430660463060696990317556818571n,
                4678361398979174017885631008335559529633853759463947250620930343087749944307n,
                27176462634198471376002287271754121925750749676999036165457559387195124025594n,
            ],
            [
                6361981813552614697928697527332318530502852015189048838072565811230204474643n,
                13815234633287489023151647353581705241145927054858922281829444557905946323248n,
                10888828634279127981352133512429657747610298502219125571406085952954136470354n,
            ],
        ].map((arr) => arr.map(ForeignBase.from)),
    }
}

export function fq_sponge_initial_state(): ForeignBase[] {
    return new Array(3).fill(ForeignScalar.from(0));
}

export function fp_sponge_initial_state(): ForeignBase[] {
    return new Array(3).fill(ForeignBase.from(0));
}

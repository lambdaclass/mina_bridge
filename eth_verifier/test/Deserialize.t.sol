// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import "../lib/bn254/BN254.sol";
import "../src/Verifier.sol";
import "../lib/msgpack/Deserialize.sol";

contract DeserializeTest is Test {
    VerifierIndex index;

    // Test to check that the destructuring of the message pack byte array is correct.
    // If we know that g1Deserialize() is correct, then this asserts that the whole
    // deserialization is working.
    function test_deserialize_opening_proof() public {
        // Data was taken from running the circuit_gen crate.

        bytes
            memory opening_proof_serialized = hex"92c42004082c5fa22d4d2bf78f2aa71269510911c1b414b8bedfe41afb3c7147f99325c42017a3bfd724d88bf23ed3d13155cd09c0a4d1d1d520b869599f00958810100621";

        Kimchi.ProverProof memory proof = MsgPk.deserializeOpeningProof(
            opening_proof_serialized
        );

        BN254.G1Point memory expected_quotient = BN254.g1Deserialize(
            0x04082c5fa22d4d2bf78f2aa71269510911c1b414b8bedfe41afb3c7147f99325
        );
        uint256 expected_blinding = 0x17a3bfd724d88bf23ed3d13155cd09c0a4d1d1d520b869599f00958810100621;

        assertEq(
            proof.opening_proof_blinding,
            expected_blinding,
            "wrong blinding"
        );
        assertEq(
            proof.opening_proof_quotient.x,
            expected_quotient.x,
            "wrong quotient x"
        );
        assertEq(
            proof.opening_proof_quotient.y,
            expected_quotient.y,
            "wrong quotient y"
        );
    }

    // Test to check that the destructuring of the message pack byte array is correct.
    // If we know that g1Deserialize() is correct, then this asserts that the whole
    // deserialization is working.
    function test_deserialize_urs() public {
        // Data was taken from running the circuit_gen crate.

        bytes
            memory urs_serialized = hex"92dc0020c4200100000000000000000000000000000000000000000000000000000000000000c42055a8e8d2b2221c2e7641eb8f5b656e352c9e7b5aca91da8ca92fe127e7fb2c21c42003bc09f3825fafdefe1cb25b4a296b60f2129a1c3a90826c3dc2021be421aa8ec4206422698aa4f80a088fd4e0d3a3cd517c2cb1f280cb95c9313823b8f8060f1786c4203558cb03f0cf841ed3a8145a7a8084e182731a9628779ef59d3bc47bae8a1192c4202ac41dd231cb8e97ffc3281b20e6799c0ae18afc13d3de1b4b363a0cd070baa7c420b6205dfa129f52601adfd87829901f06f1fd32e22a71f44b769d674448f05d83c4205d1b9b83cdcba66ff9424c7242c67394d7956dabf5407f4105124b7239d43e80c420e95ffc0999a8997b045430aa564c7bd9a25303e8a5ebbe4a99f6329b7f2a64aac4206cca50f1237f867fee63ac65249d6911494680f42d0e71386b1586be39092f9cc4204b9b17d64b384a65d7c80c8ab0f5fff75c69fd147835599753beea03152a3923c4205c0f706b036ed361e787af70acea3533d6e349869e83368979fdbbf382a4900bc420da6652a81754a6263e677d23a55bd729205f5fb64fa39b6771d9b811e5548bafc4208db1ad69d758362a4ecacff98a6910a95b3c2697e455271b2d7c078f1894eb1fc42010f56f1046a1121b1df5c401969b5acbf80eef8bfd5438270e09243413382788c4200cca37d1a3a721792dc232bb6a95bd14143350b6784bcdd4898a0bb34dd8bd2cc4202b7a1991e05b77d911d15ae590ff6f6ad7d1ed572b34654e3ce92e38e4839425c4201977ca4631e9eea53c7ba59d334c14dac7ee1071d6bf6ebf2ab7450c16975d23c4209eb742379ee8664a8bf9c18a40a534bb2961020bd0077cd0b603d2a8b9fe5a17c4201c50af6002db8dfa5a310ce795dcb06de94ead6687687263fd59acbc8612f180c4205241cbed55fbe1193f366e7ea8ad11bc97742eb35ca39129c4931b9bef64df1ec420646e69eb7d4682ad6bff24d40bf22184694c569246385cc127b3ec4a99875a85c42046b77ed1e120130743344ea9372ea58118604c730800e0d7038f2c80211f4f90c4208f20f3c39a09b5615bd8b2a09eec7dbc11b5ea1f8fe7eb0d5a69c1264412d199c42095f0b87ed771c169a8b6c0a6e21b13ab715407a4e6637a0b8fe0a1e3278f32a7c420a80440e1a07157bad23d7a7d3ddd7445f578021650016fc4bfb3324ed967c82bc4202b94fd0b89e7e2c9d245a4e94a539b14c5db26ed5ba4b3989ef0ba0712d4582ec42068f583079aa73425184a328127be63421eae683a25be94a0aa697ce74b5b972dc4209fa10b770e452852612ea392b8521683999d0a168c5eb85a6925d1ffe21d418ac420826a0976821c9309ed896678a97634a2fb1392a64ab8c59c8380012ffb601189c4203096ba3ed0b597fa29da6caa9000a409702b1f945561e82d02ab77b0cfdb649fc4204a718bc27174d557e036bcbcb9874ce5a6e1a63ccbe491e509d4201bfcb50806c420723737cf1cc96bb40021504a4ff45d21914e9484f2113d66545a3826919a9c250a";

        (BN254.G1Point[] memory g, BN254.G1Point memory h, uint256 _i) = MsgPk
            .deserializeURS(urs_serialized);

        BN254.G1Point[32] memory expected_g = [
            BN254.g1Deserialize(
                0x0100000000000000000000000000000000000000000000000000000000000000
            ),
            BN254.g1Deserialize(
                0x55a8e8d2b2221c2e7641eb8f5b656e352c9e7b5aca91da8ca92fe127e7fb2c21
            ),
            BN254.g1Deserialize(
                0x03bc09f3825fafdefe1cb25b4a296b60f2129a1c3a90826c3dc2021be421aa8e
            ),
            BN254.g1Deserialize(
                0x6422698aa4f80a088fd4e0d3a3cd517c2cb1f280cb95c9313823b8f8060f1786
            ),
            BN254.g1Deserialize(
                0x3558cb03f0cf841ed3a8145a7a8084e182731a9628779ef59d3bc47bae8a1192
            ),
            BN254.g1Deserialize(
                0x2ac41dd231cb8e97ffc3281b20e6799c0ae18afc13d3de1b4b363a0cd070baa7
            ),
            BN254.g1Deserialize(
                0xb6205dfa129f52601adfd87829901f06f1fd32e22a71f44b769d674448f05d83
            ),
            BN254.g1Deserialize(
                0x5d1b9b83cdcba66ff9424c7242c67394d7956dabf5407f4105124b7239d43e80
            ),
            BN254.g1Deserialize(
                0xe95ffc0999a8997b045430aa564c7bd9a25303e8a5ebbe4a99f6329b7f2a64aa
            ),
            BN254.g1Deserialize(
                0x6cca50f1237f867fee63ac65249d6911494680f42d0e71386b1586be39092f9c
            ),
            BN254.g1Deserialize(
                0x4b9b17d64b384a65d7c80c8ab0f5fff75c69fd147835599753beea03152a3923
            ),
            BN254.g1Deserialize(
                0x5c0f706b036ed361e787af70acea3533d6e349869e83368979fdbbf382a4900b
            ),
            BN254.g1Deserialize(
                0xda6652a81754a6263e677d23a55bd729205f5fb64fa39b6771d9b811e5548baf
            ),
            BN254.g1Deserialize(
                0x8db1ad69d758362a4ecacff98a6910a95b3c2697e455271b2d7c078f1894eb1f
            ),
            BN254.g1Deserialize(
                0x10f56f1046a1121b1df5c401969b5acbf80eef8bfd5438270e09243413382788
            ),
            BN254.g1Deserialize(
                0x0cca37d1a3a721792dc232bb6a95bd14143350b6784bcdd4898a0bb34dd8bd2c
            ),
            BN254.g1Deserialize(
                0x2b7a1991e05b77d911d15ae590ff6f6ad7d1ed572b34654e3ce92e38e4839425
            ),
            BN254.g1Deserialize(
                0x1977ca4631e9eea53c7ba59d334c14dac7ee1071d6bf6ebf2ab7450c16975d23
            ),
            BN254.g1Deserialize(
                0x9eb742379ee8664a8bf9c18a40a534bb2961020bd0077cd0b603d2a8b9fe5a17
            ),
            BN254.g1Deserialize(
                0x1c50af6002db8dfa5a310ce795dcb06de94ead6687687263fd59acbc8612f180
            ),
            BN254.g1Deserialize(
                0x5241cbed55fbe1193f366e7ea8ad11bc97742eb35ca39129c4931b9bef64df1e
            ),
            BN254.g1Deserialize(
                0x646e69eb7d4682ad6bff24d40bf22184694c569246385cc127b3ec4a99875a85
            ),
            BN254.g1Deserialize(
                0x46b77ed1e120130743344ea9372ea58118604c730800e0d7038f2c80211f4f90
            ),
            BN254.g1Deserialize(
                0x8f20f3c39a09b5615bd8b2a09eec7dbc11b5ea1f8fe7eb0d5a69c1264412d199
            ),
            BN254.g1Deserialize(
                0x95f0b87ed771c169a8b6c0a6e21b13ab715407a4e6637a0b8fe0a1e3278f32a7
            ),
            BN254.g1Deserialize(
                0xa80440e1a07157bad23d7a7d3ddd7445f578021650016fc4bfb3324ed967c82b
            ),
            BN254.g1Deserialize(
                0x2b94fd0b89e7e2c9d245a4e94a539b14c5db26ed5ba4b3989ef0ba0712d4582e
            ),
            BN254.g1Deserialize(
                0x68f583079aa73425184a328127be63421eae683a25be94a0aa697ce74b5b972d
            ),
            BN254.g1Deserialize(
                0x9fa10b770e452852612ea392b8521683999d0a168c5eb85a6925d1ffe21d418a
            ),
            BN254.g1Deserialize(
                0x826a0976821c9309ed896678a97634a2fb1392a64ab8c59c8380012ffb601189
            ),
            BN254.g1Deserialize(
                0x3096ba3ed0b597fa29da6caa9000a409702b1f945561e82d02ab77b0cfdb649f
            ),
            BN254.g1Deserialize(
                0x4a718bc27174d557e036bcbcb9874ce5a6e1a63ccbe491e509d4201bfcb50806
            )
        ];

        for (uint256 i = 0; i < expected_g.length; i++) {
            assertEq(expected_g[i].x, g[i].x, "g.x not equal");
            assertEq(expected_g[i].y, g[i].y, "g.y not equal");
        }

        BN254.G1Point memory expected_blinding = BN254.g1Deserialize(
            0x723737cf1cc96bb40021504a4ff45d21914e9484f2113d66545a3826919a9c25
        );

        assertEq(expected_blinding.x, h.x, "blinding x not equal");
        assertEq(expected_blinding.y, h.y, "blinding y not equal");
    }

    // Reference test to check that g1Deserialize is correct, taking a point from
    // the circuit_gen crate as reference.
    function test_deserialize_g1point() public {
        BN254.G1Point memory p = BN254.G1Point(
            0x00D2C202A8673B721E5844D8AAE839EB1ABC62386A225545C694079ABF8752C1,
            0x0DF10F9AD0DF8AC9D2BDD487B530CF559B8F19F6F4CF1EB99132C12D4AA60C81
        );
        BN254.G1Point memory deserialized = BN254.g1Deserialize(
            0xc15287bf9a0794c64555226a3862bc1aeb39e8aad844581e723b67a802c2d200
        );

        assertEq(p.x, deserialized.x, "x not equal");
        assertEq(p.y, deserialized.y, "y not equal");
    }

    function test_deserialize_verifier_index() public {
        bytes
            memory verifier_index_serialized = hex
        MsgPk.deser_verifier_index(
            MsgPk.from_data(verifier_index_serialized),
            index
        );

        assertEq(index.public_len, 0);
        assertEq(index.max_poly_size, 16384);
        assertEq(index.zk_rows, 3);
    }
}
